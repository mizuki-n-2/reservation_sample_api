// Code generated by MockGen. DO NOT EDIT.
// Source: reservation.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mizuki-n-2/reservation_sample_api/model"
)

// MockReservationRepository is a mock of ReservationRepository interface.
type MockReservationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReservationRepositoryMockRecorder
}

// MockReservationRepositoryMockRecorder is the mock recorder for MockReservationRepository.
type MockReservationRepositoryMockRecorder struct {
	mock *MockReservationRepository
}

// NewMockReservationRepository creates a new mock instance.
func NewMockReservationRepository(ctrl *gomock.Controller) *MockReservationRepository {
	mock := &MockReservationRepository{ctrl: ctrl}
	mock.recorder = &MockReservationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationRepository) EXPECT() *MockReservationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReservationRepository) Create(reservation *model.Reservation) (model.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", reservation)
	ret0, _ := ret[0].(model.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReservationRepositoryMockRecorder) Create(reservation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReservationRepository)(nil).Create), reservation)
}

// Delete mocks base method.
func (m *MockReservationRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReservationRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReservationRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockReservationRepository) FindAll() ([]model.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockReservationRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockReservationRepository)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockReservationRepository) FindByID(id string) (model.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(model.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockReservationRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockReservationRepository)(nil).FindByID), id)
}
